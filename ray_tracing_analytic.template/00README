############################################################################
#
# comparison between analytical solutions and numerical solutions Runge-Kutta 2rd
#
# either square of slowness with constant gradient  (parabolic solution)
# or velocity with vertical gradient (circle solution)
#
############################################################################
two files for input parameters and input model

>>>>>>>>>>>>>>>>>>>>> file input.inp
contains
===================
0. 5.                     # xsrc,zsrc
-0.01 10. -0.01 10.       # xmin,xmax,zmin,zmax
10. 10. 10                  # theta,dtheta,ntheta
1.e-3 10000                # dtau,nt_max
10 1                       # ioption,idebug
===================

ioption=10 means that the file "ray.dat" will be appended. You should delete it for erasing previous computations if you want

idebug goes from 0 to 3 for verbose outputs

>>>>>>>>>>>>>>>>>>>>> file model.inp
contains
===================
10. 7.5 0.8   ! u2zero, gammax, gammaz       background expressed as function of square of slowness
              ! or czero, gammax, gammaz     gammax is fixed to zero for only vertical gradient

Such interpretation depends on the used computer code

For comparison between numerical integration and analytical expression

@@@@@@@@@@@@@@ square of slowness with a constant gradient: parabolic solution
python ray_tracing_slowness.py

@@@@@@@@@@@@@@ velocity with a constant vertical gradient: circular solution
python ray_tracing_velocity.py

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


